#include <msp430g2452.h>
char i;

void time_engine(unsigned char time_instant_in_seconds);

unsigned char sekundes = 0;
unsigned char minutes = 0;
unsigned char stundas = 0;
unsigned char alarm_minutes = 0;
unsigned char alarm_stundas = 0;
unsigned char alarm_on = 0;
unsigned char mode = 0;
unsigned char submode = 0;
unsigned char poga4 = 0;


void indication(unsigned char digit12,unsigned char digit34, unsigned char which_digit);
void indication2(unsigned char digit1, unsigned char digit2,unsigned char digit3, unsigned char digit4, unsigned char which_digit);
void time_engine(unsigned char time_instant_in_seconds);
void digit_blinking(unsigned char digit_position,unsigned char blink_digit_position1,unsigned char blink_digit_position2, unsigned int j);
void short_press();
void long_press();
void play(int n, int e);
void display(unsigned char digit);
void delay(unsigned long ms);

int main(void)
{
  //WD taimeris
  WDTCTL = WDTPW + WDTHOLD;
  BCSCTL1 = CALBC1_12MHZ;
  DCOCTL = CALDCO_12MHZ;

  TACTL = TASSEL_2+MC_1+ID_0+TACLR;
  TACCTL0 = CCIE;
  CCR0 = 32768-1;

  BCSCTL2 = SELM_1+DIVM_0+SELS+DIVS_0;

  BCSCTL1 &= ~XTS;
  BCSCTL3 = (XT2S_0+XCAP_3);


  P2DIR &= ~0x30;
  P2IES |= 0x30; //uz nospiesanu
  P2IFG &= ~0x30;
  P2IE |= 0x30;
  __enable_interrupt();

  P1DIR |= 0xff;
  P2DIR |= 0x0f;
  P2OUT &= ~0x0f;
  P2OUT |= 0x0f;

  unsigned char digit_position = 0;
  unsigned int j;

  for(;;)
  {
    /*j++;
    if (j>9)
    j=0; */
    //indikacijas dala
    if(mode == 0)
    {
      indication(minutes,sekundes,digit_position);
      if ((j>500)&&(digit_position == 1))
      {
        P1OUT|= BIT3;
      }
    }
    else if(mode == 1)
    {
      indication(stundas,minutes,digit_position);
      if ((j>500)&&(digit_position == 1))
      {
        P1OUT|= BIT3;
      }
    }

    else if(mode == 2)
    {
      indication(stundas,minutes,digit_position);
      if (submode == 0) digit_blinking(digit_position,0,1,j);
      if (submode == 1) digit_blinking(digit_position,2,3,j);
      if (submode == 2)
      {
        digit_blinking(digit_position,0,1,j);
        digit_blinking(digit_position,2,3,j);
      }
      if ((j<500)&&(digit_position==1))
      P1OUT |= 0x8;
    }
    else if ((mode == 3)&(submode == 0)&(alarm_on == 1))
    {
      indication2(0xa,0xb,0xc,0xd,digit_position); //Attelo AL
    }
    else if ((mode == 3)&(submode == 0)&(alarm_on == 0))
    {
      indication2(0xa,0xb,0xc,0xe,digit_position); //attelo AloF
    }
    else if(mode == 3)
    {
      indication(alarm_stundas,alarm_minutes,digit_position);
      if(submode == 1) digit_blinking(digit_position,0,1,j);
      if(submode == 2) digit_blinking(digit_position,2,3,j);
    }
    //indikacijas beigas

    if((alarm_minutes == minutes)&&(alarm_stundas == stundas)&&(alarm_on == 1))
    {
      //meldinjsh
    play(1,1);
    delay(100);
    }

    //digit_blinking(digit_position,0,1,j2);
    digit_position = (digit_position+1)%4; //cikleejas poziicijaam
    j++;
    if (j==1000)
    {
      //time_engine(1);
      j = 0;
    }

    delay(100);

  }
}


void display(unsigned char digit)
{
  if(digit==0) P1OUT = 0xf5;
  if(digit==1) P1OUT = 0x05;
  if(digit==2) P1OUT = 0x73;
  if(digit==3) P1OUT = 0x57;
  if(digit==4) P1OUT = 0x87;
  if(digit==5) P1OUT = 0xd6;
  if(digit==6) P1OUT = 0xf6;
  if(digit==7) P1OUT = 0x45;
  if(digit==8) P1OUT = 0xf7;
  if(digit==9) P1OUT = 0xd7;
  if(digit==0xa) P1OUT = 0xe7;
  if(digit==0xb) P1OUT = 0xb0;
  if(digit==0xc) P1OUT = 0x36;
  if(digit==0xd) P1OUT = 0x26;
  if(digit==0xe) P1OUT = 0xe2;
  if(digit==0xf) P1OUT = 0x00;
}

void indication(unsigned char digit12,unsigned char digit34, unsigned char which_digit)
{
  P2OUT &= ~0x0f;
  if(which_digit == 0) {P2OUT |= BIT0; display(digit12/10);}
  if(which_digit == 1) {P2OUT |= BIT1; display(digit12%10);}
  if(which_digit == 2) {P2OUT |= BIT2; display(digit34/10);}
  if(which_digit == 3) {P2OUT |= BIT3; display(digit34%10);}
}

void indication2(unsigned char digit1, unsigned char digit2,unsigned char digit3, unsigned char digit4, unsigned char which_digit)
{
  P2OUT &= ~0x0f;
  if(which_digit == 0) {P2OUT |= BIT0; display(digit1);}
  if(which_digit == 1) {P2OUT |= BIT1; display(digit2);}
  if(which_digit == 2) {P2OUT |= BIT2; display(digit3);}
  if(which_digit == 3) {P2OUT |= BIT3; display(digit4);}
}

void delay(unsigned long ms)
{
  unsigned long ims;
  for(ims = 0;ims<ms;ims++)
  {
    __delay_cycles(120);
  }
}

void time_engine(unsigned char time_instant_in_seconds)
{
  sekundes = sekundes + time_instant_in_seconds;
    if (sekundes > 59)
    {
      sekundes = 0;
      minutes++;
    }
    if (minutes > 59)
    {
      minutes = 0;
      stundas++;
    }
    if (stundas > 23)
    {
      stundas = 0;
    }
}

void digit_blinking(unsigned char digit_position,unsigned char blink_digit_position1,unsigned char blink_digit_position2, unsigned int j2)
{
  if ((j2>500)&&(digit_position == blink_digit_position1))
  {
    P2OUT &= ~(0x01<<digit_position);
  }
  if ((j2>500)&&(digit_position == blink_digit_position2))
  {
    P2OUT &= ~(0x01<<digit_position);
  }
}

void play(int n, int e)
{
  unsigned int del;
  unsigned long laiks;
  volatile unsigned long i;

  if (n==1) del = 47;
  if (n==2) del = 42;
  if (n==3) del = 37;
  if (n==4) del = 35;
  if (n==5) del = 31;
  if (n==6) del = 28;
  if (n==7) del = 26;
  if (n==8) del = 23;
  if (e==1) laiks = 100000;
  if (e==2) laiks = 40000;
  if (e==4) laiks = 25000;
  if (e==8) laiks = 12500;
  if (e==16) laiks = 6250;
  for (i=0 ; i<laiks ; i=i+del+del)
  {
    delay(del);
    P2OUT |= 0x0c;
    delay(del);
    P2OUT &= ~0x0c;
  }
  delay(500);
}

void short_press()
{
  if(mode == 2)
  {
    if(submode == 0)
    {
      stundas++;
      if (stundas > 23)
      stundas = 0;
    }
    if(submode == 1)
    {
      minutes++;
      if(minutes > 59)
      minutes = 0;
    }
  }
  if(mode == 3)
  {
    if(submode == 0)
    {
      alarm_on = (alarm_on+1)%2;
    }
    if(submode == 1)
    {
      alarm_stundas++;
      if (alarm_stundas > 59)
      alarm_stundas = 0;
    }
    if(submode == 2)
    {
      alarm_minutes++;
      if (alarm_minutes > 59)
      alarm_minutes = 0;
    }
  }
}

void long_press()
{

  if(mode == 2)
  {
  submode++;
  if(submode>2)
  submode = 0;
  }
  if(mode == 3)
  {
  submode++;
  if(submode>2)
  submode = 0;
  }
}

#pragma vector = PORT2_VECTOR
__interrupt void P2_ISR(void)
{
  if((P2IFG & BIT5) == BIT5)
  {
    P2IFG &= ~BIT5; //SW1 activates

    if ((alarm_minutes == minutes)&&(alarm_stundas == stundas)&&(alarm_on == 1))
    {
      mode = mode+3;
    }
    if ((alarm_minutes == minutes)&&(alarm_stundas == stundas))
    {
    alarm_on = 0;
    }
    mode++;
    mode = mode%4;

  }
  if((P2IFG & BIT4) == BIT4)
  {
    P2IFG &= ~BIT4; //SW2 activates
    if((P2IES & BIT4) == BIT4)
    {
      P2IES &= ~BIT4; //->uz atlaisanu
      poga4 = sekundes; //nofiksee sekundes
    }
    else //ja poga straadaa uz atlaisanu
    {
      P2IES |= BIT4;
      if (sekundes - poga4 > 1)
      long_press();
      else
      short_press();
    }
  }
}

#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer_A(void)
{
  time_engine(1);
}